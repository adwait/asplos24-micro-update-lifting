$date
	Tue Jan 23 15:27:18 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tlb_tb $end
$var wire 32 ! cdata [31:0] $end
$var wire 1 " de_io_flush_i $end
$var wire 1 # de_io_lu_access_i $end
$var wire 1 $ de_io_lu_asid_i $end
$var wire 32 % de_io_lu_vaddr_i [31:0] $end
$var wire 31 & tdata [30:0] $end
$var wire 32 ' de_io_vaddr_to_be_flushed_i [31:0] $end
$var wire 63 ( de_io_update_i [62:0] $end
$var wire 1 ) de_io_lu_is_4M_o $end
$var wire 1 * de_io_lu_hit_o $end
$var wire 32 + de_io_lu_content_o [31:0] $end
$var wire 1 , de_io_asid_to_be_flushed_i $end
$var reg 32 - CLK_CYCLE [31:0] $end
$var reg 9 . asid [8:0] $end
$var reg 2 / choice [1:0] $end
$var reg 1 0 clk $end
$var reg 32 1 edata [31:0] $end
$var reg 1 2 reset $end
$var reg 1 , tb_io_asid_to_be_flushed_i $end
$var reg 1 3 tb_io_flush_i $end
$var reg 1 4 tb_io_lu_access_i $end
$var reg 1 5 tb_io_lu_asid_i $end
$var reg 32 6 tb_io_lu_vaddr_i [31:0] $end
$var reg 63 7 tb_io_update_i [62:0] $end
$var reg 32 8 tb_io_vaddr_to_be_flushed_i [31:0] $end
$var reg 20 9 vpn [19:0] $end
$var integer 32 : i [31:0] $end
$var integer 32 ; seed [31:0] $end
$scope module tlb_i $end
$var wire 1 , asid_to_be_flushed_i $end
$var wire 1 < asid_to_be_flushed_is0 $end
$var wire 1 0 clk_i $end
$var wire 1 " flush_i $end
$var wire 1 # lu_access_i $end
$var wire 1 $ lu_asid_i $end
$var wire 32 = lu_vaddr_i [31:0] $end
$var wire 128 > port_content_q_o [127:0] $end
$var wire 4 ? port_replace_en_o [3:0] $end
$var wire 124 @ port_tags_q_o [123:0] $end
$var wire 1 2 rst_ni $end
$var wire 63 A update_i [62:0] $end
$var wire 32 B vaddr_to_be_flushed_i [31:0] $end
$var wire 1 C vaddr_to_be_flushed_is0 $end
$var wire 31 D tdata [30:0] $end
$var wire 31 E tags_q_3 [30:0] $end
$var wire 31 F tags_q_2 [30:0] $end
$var wire 31 G tags_q_1 [30:0] $end
$var wire 31 H tags_q_0 [30:0] $end
$var wire 32 I content_q_3 [31:0] $end
$var wire 32 J content_q_2 [31:0] $end
$var wire 32 K content_q_1 [31:0] $end
$var wire 32 L content_q_0 [31:0] $end
$var wire 32 M cdata [31:0] $end
$var reg 128 N content_n [127:0] $end
$var reg 128 O content_q [127:0] $end
$var reg 32 P lu_content_o [31:0] $end
$var reg 4 Q lu_hit [3:0] $end
$var reg 1 * lu_hit_o $end
$var reg 1 ) lu_is_4M_o $end
$var reg 6 R plru_tree_n [5:0] $end
$var reg 6 S plru_tree_q [5:0] $end
$var reg 4 T replace_en [3:0] $end
$var reg 124 U tags_n [123:0] $end
$var reg 124 V tags_q [123:0] $end
$var reg 4 W vaddr_vpn0_match [3:0] $end
$var reg 4 X vaddr_vpn1_match [3:0] $end
$var reg 10 Y vpn0 [9:0] $end
$var reg 10 Z vpn1 [9:0] $end
$scope function countSetBits $end
$var reg 32 [ count [31:0] $end
$var reg 32 \ countSetBits [31:0] $end
$var reg 4 ] vector [3:0] $end
$scope begin sv2v_autoblock_9 $end
$var integer 32 ^ idx [31:0] $end
$upscope $end
$upscope $end
$scope begin p_assertions $end
$upscope $end
$scope begin plru_replacement $end
$scope begin sv2v_autoblock_3 $end
$var reg 32 _ i [31:0] $end
$scope begin sv2v_autoblock_4 $end
$var reg 32 ` idx_base [31:0] $end
$var reg 32 a new_index [31:0] $end
$var reg 32 b shift [31:0] $end
$scope begin sv2v_autoblock_5 $end
$var reg 32 c lvl [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin sv2v_autoblock_6 $end
$var reg 32 d i [31:0] $end
$scope begin sv2v_autoblock_7 $end
$var reg 1 e en $end
$var reg 32 f idx_base [31:0] $end
$var reg 32 g new_index [31:0] $end
$var reg 32 h shift [31:0] $end
$scope begin sv2v_autoblock_8 $end
$var reg 32 i lvl [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin translation $end
$scope begin sv2v_autoblock_1 $end
$var reg 32 j i [31:0] $end
$upscope $end
$upscope $end
$scope begin update_flush $end
$scope begin sv2v_autoblock_2 $end
$var reg 32 k i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope task make_tlb_flush $end
$var reg 9 l asid [8:0] $end
$var reg 20 m vpn [19:0] $end
$upscope $end
$scope task make_tlb_lookup $end
$var reg 9 n asid [8:0] $end
$var reg 20 o vpn [19:0] $end
$upscope $end
$scope task make_tlb_update $end
$var reg 9 p asid [8:0] $end
$var reg 32 q entry_data [31:0] $end
$var reg 20 r vpn [19:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
xe
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1 M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
xC
bx B
bx A
bx @
bx ?
bx >
bx =
x<
b1110010101 ;
bx :
bx 9
bx 8
bx 7
bx 6
x5
x4
x3
12
bx 1
10
bx /
bx .
b0 -
x,
bx +
x*
x)
bx (
bx '
bx01 &
bx %
x$
x#
x"
bx !
$end
#10
00
#20
b1 ?
b1 T
b1 g
b1 h
b1 f
b10 i
0e
b100 d
b100 _
b0 R
b0 L
b0 K
b0 J
b0 I
b100 k
b0 N
b0 U
b100 j
0)
b0 +
b0 P
0*
b0 Q
b0 H
b0 G
b0 F
b0 E
b1 -
b0 S
b0 >
b0 O
b0 @
b0 V
10
02
#30
00
#40
b10 -
10
#50
00
#60
b11 -
10
b1000111000000101000100010001 !
b1000111000000101000100010001 1
b1100111000000000111 9
b10001000111000000100111010101011 ;
b10110011100000000011101 &
b1 .
12
#70
00
#80
b1000111000000101000100010001 L
b10110011100000000011101 H
b1000111000000101000100010001 >
b1000111000000101000100010001 O
b10110011100000000011101 @
b10110011100000000011101 V
b100 -
b1000111000000101000100010001 D
1C
1<
b100 j
b0 Z
b0 Y
b1000111000000101000100010001 N
b10110011100000000011101 U
b1110 X
b1110 W
b100 k
b10110011100000000011101 M
10
b10010100010100011000101000101000 !
b10010100010100011000101000101000 1
b11000011110100001110101 &
b10000111101000011101 9
b0 '
b0 8
b0 B
0,
0"
03
0$
05
b0 %
b0 =
b0 6
b100110011100000000011100000000100001000111000000101000100010001 (
b100110011100000000011100000000100001000111000000101000100010001 7
b100110011100000000011100000000100001000111000000101000100010001 A
b1000111000000101000100010001 q
b1 p
b1100111000000000111 r
b0 /
b10100010100011000100100111110 ;
b0 :
#90
00
#100
b100 j
b10110011100000000011100 H
b10110011100000000011100 @
b10110011100000000011100 V
b101 -
b0 D
b10110011100000000011100 U
b100 k
b1 M
10
b1101111111010010001000111011111 !
b1101111111010010001000111011111 1
b10010100111111001011101 &
b101001111110010111 9
1"
13
b0 (
b0 7
b0 A
b0 l
b0 m
b1 /
b11101111111010010000111010001101 ;
b1 :
#110
00
#120
b110 -
0C
b0 X
b0 W
b100 k
0<
10
b11010111000100011100100110101 !
b11010111000100011100100110101 1
b10001011000101000101101 &
b10110001010001011 9
b101001111110010111000000000000 '
b101001111110010111000000000000 8
b101001111110010111000000000000 B
1,
b1 l
b101001111110010111 m
b11 /
b10011010111000100011011001001000 ;
b10 :
#130
00
#140
b11010111000100011100100110101 L
b100 j
b10001011000101000101101 H
b11010111000100011100100110101 >
b11010111000100011100100110101 O
b10001011000101000101101 @
b10001011000101000101101 V
b111 -
b11010111000100011100100110101 D
1C
1<
b1110 X
b1110 W
b11010111000100011100100110101 N
b10001011000101000101101 U
b100 k
b10001011000101000101101 M
10
b1101000001111010000011111010000 !
b1101000001111010000011111010000 1
b10000111100010011100001 &
b1111000100111000 9
b0 '
b0 8
b0 B
0,
0"
03
b100001011000101000101100000000100011010111000100011100100110101 (
b100001011000101000101100000000100011010111000100011100100110101 7
b100001011000101000101100000000100011010111000100011100100110101 A
b11010111000100011100100110101 q
b10110001010001011 r
b0 /
b11101000001111010000010111011111 ;
b11 :
#150
00
#160
b1101000001111010000011111010000 L
b100 j
b10000111100010011100001 H
b1101000001111010000011111010000 >
b1101000001111010000011111010000 O
b10000111100010011100001 @
b10000111100010011100001 V
b1000 -
b1101000001111010000011111010000 D
b1101000001111010000011111010000 N
b10000111100010011100001 U
b100 k
b10000111100010011100001 M
10
b11110101010110110101010011101010 !
b11110101010110110101010011101010 1
b10011110010110111011001 &
b111100101101110110 9
b100000111100010011100000000000101101000001111010000011111010000 (
b100000111100010011100000000000101101000001111010000011111010000 7
b100000111100010011100000000000101101000001111010000011111010000 A
b1101000001111010000011111010000 q
b1111000100111000 r
b1110101010110110101001110000010 ;
b100 :
#170
00
#180
b100 j
b10000111100010011100000 H
b10000111100010011100000 @
b10000111100010011100000 V
b1001 -
b0 D
b10000111100010011100000 U
b100 k
b1 M
10
b10010111001101111110011000101110 !
b10010111001101111110011000101110 1
b11111010110111010000101 &
b11110101101110100001 9
1"
13
b0 (
b0 7
b0 A
b0 l
b0 m
b1 /
b10111001101111110010100100001 ;
b101 :
#190
00
#200
b1010 -
0C
b0 X
b0 W
b100 k
0<
10
b10100100111100000011110001001001 !
b10100100111100000011110001001001 1
b11001111110011011010101 &
b10011111100110110101 9
b11110101101110100001000000000000 '
b11110101101110100001000000000000 8
b11110101101110100001000000000000 B
1,
b1 l
b11110101101110100001 m
b11 /
b100100111100000011101101101100 ;
b110 :
#210
00
#220
b1011 -
1C
b1110 X
b1110 W
b100 k
1<
10
b10001010010110110111101000010100 !
b10001010010110110111101000010100 1
b11110010111011100010101 &
b11100101110111000101 9
b0 '
b0 8
b0 B
0,
b0 l
b0 m
b1 /
b1010010110110111100011010011 ;
b111 :
#230
00
#240
b1100 -
b100 k
b100 j
b1110010111 Z
b111000101 Y
10
b1011100000111011001011110111000 !
b1011100000111011001011110111000 1
b10000101010101101110101 &
b1010101011011101 9
0"
03
1$
15
b11100101110111000101000000000000 %
b11100101110111000101000000000000 =
b11100101110111000101000000000000 6
b1 n
b11100101110111000101 o
b10 /
b11011100000111011001010010000110 ;
b1000 :
#250
00
#260
b1101 -
b100 k
b100 j
b0 Z
b0 Y
10
b1000101010010011100101110001010 !
b1000101010010011100101110001010 1
b10011100111010011001001 &
b111001110100110010 9
1"
13
0$
05
b0 %
b0 =
b0 6
b1 /
b11000101010010011100100101110101 ;
b1001 :
#270
00
#280
b1110 -
10
b11100100001001011111001011001000 !
b11100100001001011111001011001000 1
b10110010000010100111101 &
b1100100000101001111 9
b1100100001001011111000101010000 ;
b1010 :
#290
00
#300
b1111 -
10
b10110110010101100011110001101100 !
b10110110010101100011110001101100 1
b11111100101000111010101 &
b11111001010001110101 9
b110110010101100011101110000111 ;
b1011 :
#310
00
#320
b10000 -
0C
b0 X
b0 W
b100 k
0<
10
b11110011001100010111001011100110 !
b11110011001100010111001011100110 1
b11000110100110101101101 &
b10001101001101011011 9
b11111001010001110101000000000000 '
b11111001010001110101000000000000 8
b11111001010001110101000000000000 B
1,
b1 l
b11111001010001110101 m
b11 /
b1110011001100010111000001001010 ;
b1100 :
#330
00
#340
b10001 -
b100 k
10
b11011011101101011011000010110111 !
b11011011101101011011000010110111 1
b11110001001111101110001 &
b11100010011111011100 9
b10001101001101011011000000000000 '
b10001101001101011011000000000000 8
b10001101001101011011000000000000 B
b10001101001101011011 m
b1011011101101011010111110001001 ;
b1101 :
#350
00
#360
b10010 -
b100 k
10
b10100011101110000101110001000111 !
b10100011101110000101110001000111 1
b11011010100111000010001 &
b10110101001110000100 9
b11100010011111011100000000000000 '
b11100010011111011100000000000000 8
b11100010011111011100000000000000 B
b11100010011111011100 m
b100011101110000101101111110100 ;
b1110 :
#370
00
#380
b10011 -
1C
1<
b1110 X
b1110 W
b100 k
b100 j
b1011010100 Z
b1110000100 Y
10
b1101000101011010001100011010 !
b1101000101011010001100011010 1
b11010010000011111110101 &
b10100100000111111101 9
b0 '
b0 8
b0 B
0,
0"
03
1$
15
b10110101001110000100000000000000 %
b10110101001110000100000000000000 =
b10110101001110000100000000000000 6
b10110101001110000100 o
b10 /
b10001101000101011010000111111011 ;
b1111 :
#390
00
#400
b10100 -
0C
0<
b0 X
b0 W
b100 k
b100 j
b0 Z
b0 Y
10
b111010101000001100110101110101 !
b111010101000001100110101110101 1
b11001101100110110011001 &
b10011011001101100110 9
b10100100000111111101000000000000 '
b10100100000111111101000000000000 8
b10100100000111111101000000000000 B
1,
1"
13
0$
05
b0 %
b0 =
b0 6
b10100100000111111101 m
b11 /
b10111010101000001100101011001110 ;
b10000 :
#410
00
#420
b10101 -
b100 k
10
b11101001001000100100110011010010 !
b11101001001000100100110011010010 1
b11100011111101000000001 &
b11000111111010000000 9
b10011011001101100110000000000000 '
b10011011001101100110000000000000 8
b10011011001101100110000000000000 B
b10011011001101100110 m
b1101001001000100100101101011101 ;
b10001 :
#430
00
#440
b10110 -
10
b111001101001110001001001111010 ;
b10010 :
