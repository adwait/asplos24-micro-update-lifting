$date
	Tue Jan 23 15:27:18 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tlb_tb $end
$var wire 32 ! cdata [31:0] $end
$var wire 1 " de_io_flush_i $end
$var wire 1 # de_io_lu_access_i $end
$var wire 1 $ de_io_lu_asid_i $end
$var wire 32 % de_io_lu_vaddr_i [31:0] $end
$var wire 31 & tdata [30:0] $end
$var wire 32 ' de_io_vaddr_to_be_flushed_i [31:0] $end
$var wire 63 ( de_io_update_i [62:0] $end
$var wire 1 ) de_io_lu_is_4M_o $end
$var wire 1 * de_io_lu_hit_o $end
$var wire 32 + de_io_lu_content_o [31:0] $end
$var wire 1 , de_io_asid_to_be_flushed_i $end
$var reg 32 - CLK_CYCLE [31:0] $end
$var reg 9 . asid [8:0] $end
$var reg 2 / choice [1:0] $end
$var reg 1 0 clk $end
$var reg 32 1 edata [31:0] $end
$var reg 1 2 reset $end
$var reg 1 , tb_io_asid_to_be_flushed_i $end
$var reg 1 3 tb_io_flush_i $end
$var reg 1 4 tb_io_lu_access_i $end
$var reg 1 5 tb_io_lu_asid_i $end
$var reg 32 6 tb_io_lu_vaddr_i [31:0] $end
$var reg 63 7 tb_io_update_i [62:0] $end
$var reg 32 8 tb_io_vaddr_to_be_flushed_i [31:0] $end
$var reg 20 9 vpn [19:0] $end
$var integer 32 : i [31:0] $end
$var integer 32 ; seed [31:0] $end
$scope module tlb_i $end
$var wire 1 , asid_to_be_flushed_i $end
$var wire 1 < asid_to_be_flushed_is0 $end
$var wire 1 0 clk_i $end
$var wire 1 " flush_i $end
$var wire 1 # lu_access_i $end
$var wire 1 $ lu_asid_i $end
$var wire 32 = lu_vaddr_i [31:0] $end
$var wire 128 > port_content_q_o [127:0] $end
$var wire 4 ? port_replace_en_o [3:0] $end
$var wire 124 @ port_tags_q_o [123:0] $end
$var wire 1 2 rst_ni $end
$var wire 63 A update_i [62:0] $end
$var wire 32 B vaddr_to_be_flushed_i [31:0] $end
$var wire 1 C vaddr_to_be_flushed_is0 $end
$var wire 31 D tdata [30:0] $end
$var wire 31 E tags_q_3 [30:0] $end
$var wire 31 F tags_q_2 [30:0] $end
$var wire 31 G tags_q_1 [30:0] $end
$var wire 31 H tags_q_0 [30:0] $end
$var wire 32 I content_q_3 [31:0] $end
$var wire 32 J content_q_2 [31:0] $end
$var wire 32 K content_q_1 [31:0] $end
$var wire 32 L content_q_0 [31:0] $end
$var wire 32 M cdata [31:0] $end
$var reg 128 N content_n [127:0] $end
$var reg 128 O content_q [127:0] $end
$var reg 32 P lu_content_o [31:0] $end
$var reg 4 Q lu_hit [3:0] $end
$var reg 1 * lu_hit_o $end
$var reg 1 ) lu_is_4M_o $end
$var reg 6 R plru_tree_n [5:0] $end
$var reg 6 S plru_tree_q [5:0] $end
$var reg 4 T replace_en [3:0] $end
$var reg 124 U tags_n [123:0] $end
$var reg 124 V tags_q [123:0] $end
$var reg 4 W vaddr_vpn0_match [3:0] $end
$var reg 4 X vaddr_vpn1_match [3:0] $end
$var reg 10 Y vpn0 [9:0] $end
$var reg 10 Z vpn1 [9:0] $end
$scope function countSetBits $end
$var reg 32 [ count [31:0] $end
$var reg 32 \ countSetBits [31:0] $end
$var reg 4 ] vector [3:0] $end
$scope begin sv2v_autoblock_9 $end
$var integer 32 ^ idx [31:0] $end
$upscope $end
$upscope $end
$scope begin p_assertions $end
$upscope $end
$scope begin plru_replacement $end
$scope begin sv2v_autoblock_3 $end
$var reg 32 _ i [31:0] $end
$scope begin sv2v_autoblock_4 $end
$var reg 32 ` idx_base [31:0] $end
$var reg 32 a new_index [31:0] $end
$var reg 32 b shift [31:0] $end
$scope begin sv2v_autoblock_5 $end
$var reg 32 c lvl [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin sv2v_autoblock_6 $end
$var reg 32 d i [31:0] $end
$scope begin sv2v_autoblock_7 $end
$var reg 1 e en $end
$var reg 32 f idx_base [31:0] $end
$var reg 32 g new_index [31:0] $end
$var reg 32 h shift [31:0] $end
$scope begin sv2v_autoblock_8 $end
$var reg 32 i lvl [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin translation $end
$scope begin sv2v_autoblock_1 $end
$var reg 32 j i [31:0] $end
$upscope $end
$upscope $end
$scope begin update_flush $end
$scope begin sv2v_autoblock_2 $end
$var reg 32 k i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope task make_tlb_flush $end
$var reg 9 l asid [8:0] $end
$var reg 20 m vpn [19:0] $end
$upscope $end
$scope task make_tlb_lookup $end
$var reg 9 n asid [8:0] $end
$var reg 20 o vpn [19:0] $end
$upscope $end
$scope task make_tlb_update $end
$var reg 9 p asid [8:0] $end
$var reg 32 q entry_data [31:0] $end
$var reg 20 r vpn [19:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
xe
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1 M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
xC
bx B
bx A
bx @
bx ?
bx >
bx =
x<
b1110000100 ;
bx :
bx 9
bx 8
bx 7
bx 6
x5
x4
x3
12
bx 1
10
bx /
bx .
b0 -
x,
bx +
x*
x)
bx (
bx '
bx01 &
bx %
x$
x#
x"
bx !
$end
#10
00
#20
b1 ?
b1 T
b1 g
b1 h
b1 f
b10 i
0e
b100 d
b100 _
b0 R
b0 L
b0 K
b0 J
b0 I
b100 k
b0 N
b0 U
b100 j
0)
b0 +
b0 P
0*
b0 Q
b0 H
b0 G
b0 F
b0 E
b1 -
b0 S
b0 >
b0 O
b0 @
b0 V
10
02
#30
00
#40
b10 -
10
#50
00
#60
b11 -
10
b100111000000000111011101001110 !
b100111000000000111011101001110 1
b1001000011000000111 9
b10100111000000000111010111110010 ;
b10100100001100000011101 &
b1 .
12
#70
00
#80
b100 -
b0 D
1C
1<
b100 j
b100100001 Z
b1000000111 Y
b1111 X
b1111 W
b100 k
b1 M
10
b1001010010000011101111110010100 !
b1001010010000011101111110010100 1
b10001011111111111000101 &
b10111111111110001 9
b0 '
b0 8
b0 B
0,
0"
03
1$
15
b1001000011000000111000000000000 %
b1001000011000000111000000000000 =
b1001000011000000111000000000000 6
b0 (
b0 7
b0 A
b1 n
b1001000011000000111 o
b10 /
b11001010010000011101110001010001 ;
b0 :
#90
00
#100
b101 -
b100 j
b1011111 Z
b1111110001 Y
10
b11101100111000010111100011011001 !
b11101100111000010111100011011001 1
b10010101011101010111101 &
b101010111010101111 9
b10111111111110001000000000000 %
b10111111111110001000000000000 =
b10111111111110001000000000000 6
b10111111111110001 o
b1101100111000010111011001011100 ;
b1 :
#110
00
#120
b110 -
0C
0<
b0 X
b0 W
b100 k
b100 j
b0 Z
b0 Y
10
b1100111010101110101010111001110 !
b1100111010101110101010111001110 1
b11011011011000011100001 &
b10110110110000111000 9
b101010111010101111000000000000 '
b101010111010101111000000000000 8
b101010111010101111000000000000 B
1,
1"
13
0$
05
b0 %
b0 =
b0 6
b1 l
b101010111010101111 m
b11 /
b11100111010101110101001010000011 ;
b10 :
#130
00
#140
b111 -
1C
b1111 X
b1111 W
b100 k
1<
10
b1001001001011111100010110010010 !
b1001001001011111100010110010010 1
b11101101010011111110001 &
b11011010100111111100 9
b0 '
b0 8
b0 B
0,
b0 l
b0 m
b1 /
b11001001001011111100001111110110 ;
b11 :
#150
00
#160
b1001001001011111100010110010010 L
b1110 X
b1110 W
b100 j
b11101101010011111110001 H
b1001001001011111100010110010010 >
b1001001001011111100010110010010 O
b11101101010011111110001 @
b11101101010011111110001 V
b1000 -
b1001001001011111100010110010010 D
b1001001001011111100010110010010 N
b11101101010011111110001 U
b100 k
b11101101010011111110001 M
10
b11101001001101001001100111010 !
b11101001001101001001100111010 1
b11010110101110000001101 &
b10101101011100000011 9
0"
03
b101101101010011111110000000000101001001001011111100010110010010 (
b101101101010011111110000000000101001001001011111100010110010010 7
b101101101010011111110000000000101001001001011111100010110010010 A
b1001001001011111100010110010010 q
b1 p
b11011010100111111100 r
b0 /
b10011101001001101001000110100101 ;
b100 :
#170
00
#180
b100 j
b11101101010011111110000 H
b11101101010011111110000 @
b11101101010011111110000 V
b1001 -
b0 D
b11101101010011111110000 U
b100 k
b1 M
10
b1100110101000100001001111001101 !
b1100110101000100001001111001101 1
b11000011100000001111001 &
b10000111000000011110 9
1"
13
b0 (
b0 7
b0 A
b1 /
b11100110101000100001000101000000 ;
b101 :
#190
00
#200
b1010 -
0C
b0 X
b0 W
b100 k
0<
10
b10000010000000011010000000000100 !
b10000010000000011010000000000100 1
b11001010100110010001101 &
b10010101001100100011 9
b10000111000000011110000000000000 '
b10000111000000011110000000000000 8
b10000111000000011110000000000000 B
1,
b1 l
b10000111000000011110 m
b11 /
b10000000011001111000110111 ;
b110 :
#210
00
#220
b1011 -
1C
b1110 X
b1110 W
b100 k
1<
10
b10101100000110111001111001011000 !
b10101100000110111001111001011000 1
b11000110000001111000001 &
b10001100000011110000 9
b0 '
b0 8
b0 B
0,
b0 l
b0 m
b1 /
b101100000110111001110010111010 ;
b111 :
#230
00
#240
b1100 -
0C
b0 X
b0 W
b100 k
0<
10
b1010111001011101111101110101110 !
b1010111001011101111101110101110 1
b11010111001000000010101 &
b10101110010000000101 9
b10001100000011110000000000000000 '
b10001100000011110000000000000000 8
b10001100000011110000000000000000 B
1,
b1 l
b10001100000011110000 m
b11 /
b11010111001011101111100010111001 ;
b1000 :
#250
00
#260
b1101 -
b100 k
10
b110100100111101101001101101001 !
b110100100111101101001101101001 1
b10100001010111011000101 &
b1000010101110110001 9
b10101110010000000101000000000000 '
b10101110010000000101000000000000 8
b10101110010000000101000000000000 B
b10101110010000000101 m
b10110100100111101101000011100100 ;
b1001 :
#270
00
#280
b1110 -
1C
b1110 X
b1110 W
b100 k
1<
10
b11011011101010001011111010110111 !
b11011011101010001011111010110111 1
b11001100111011100000001 &
b10011001110111000000 9
b0 '
b0 8
b0 B
0,
b0 l
b0 m
b1 /
b1011011101010001011110110101011 ;
b1010 :
#290
00
#300
b1111 -
b100 k
b100 j
b1001100111 Z
b111000000 Y
10
b10101011101100101110011001010111 !
b10101011101100101110011001010111 1
b11100010000101011100001 &
b11000100001010111000 9
0"
03
1$
15
b10011001110111000000000000000000 %
b10011001110111000000000000000000 =
b10011001110111000000000000000000 6
b10011001110111000000 o
b10 /
b101011101100101110010000111110 ;
b1011 :
#310
00
#320
b10101011101100101110011001010111 L
b11100010000101011100001 H
b10101011101100101110011001010111 >
b10101011101100101110011001010111 O
b11100010000101011100001 @
b11100010000101011100001 V
b10000 -
b101011101100101110011001010111 D
b100 j
b0 Z
b0 Y
b10101011101100101110011001010111 N
b11100010000101011100001 U
b100 k
b11100010000101011100001 M
10
b10011011100010101100011000110111 !
b10011011100010101100011000110111 1
b11100001100010110010001 &
b11000011000101100100 9
0$
05
b0 %
b0 =
b0 6
b101100010000101011100000000000110101011101100101110011001010111 (
b101100010000101011100000000000110101011101100101110011001010111 7
b101100010000101011100000000000110101011101100101110011001010111 A
b10101011101100101110011001010111 q
b11000100001010111000 r
b0 /
b11011100010101100010110001101 ;
b1100 :
#330
00
#340
b100 j
b11100010000101011100000 H
b11100010000101011100000 @
b11100010000101011100000 V
b10001 -
b0 D
0C
0<
b0 X
b0 W
b11100010000101011100000 U
b100 k
b1 M
10
b11000100011001000111101010001000 !
b11000100011001000111101010001000 1
b10001101100010110100101 &
b11011000101101001 9
b11000011000101100100000000000000 '
b11000011000101100100000000000000 8
b11000011000101100100000000000000 B
1,
1"
13
b0 (
b0 7
b0 A
b1 l
b11000011000101100100 m
b11 /
b1000100011001000111100101001000 ;
b1101 :
#350
00
#360
b10010 -
b100 k
10
b1000011011101111100011110000110 !
b1000011011101111100011110000110 1
b11111101011011010100101 &
b11111010110110101001 9
b11011000101101001000000000000 '
b11011000101101001000000000000 8
b11011000101101001000000000000 B
b11011000101101001 m
b11000011011101111100010011011111 ;
b1110 :
#370
00
#380
b10011 -
1C
b1110 X
b1110 W
b100 k
1<
10
b10110001110010010100000001100011 !
b10110001110010010100000001100011 1
b10110011000010010011101 &
b1100110000100100111 9
b0 '
b0 8
b0 B
0,
b0 l
b0 m
b1 /
b110001110010010011111010000010 ;
b1111 :
#390
00
#400
b10100 -
10
b1001110111111010110111110011101 !
b1001110111111010110111110011101 1
b11011111111101110000101 &
b10111111111011100001 9
b11001110111111010110110000100001 ;
b10000 :
#410
00
#420
b10101 -
0C
b0 X
b0 W
b100 k
0<
10
b100010101011101001000101000101 !
b100010101011101001000101000101 1
b10110100101110111101101 &
b1101001011101111011 9
b10111111111011100001000000000000 '
b10111111111011100001000000000000 8
b10111111111011100001000000000000 B
1,
b1 l
b10111111111011100001 m
b11 /
b10100010101011101000111001101100 ;
b10001 :
#430
00
#440
b10110 -
10
b10110001011011111000100001111101 ;
b10010 :
